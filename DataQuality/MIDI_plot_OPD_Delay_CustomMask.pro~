@linspace.pro
@symcat.pro
@showsym.pro
@sixlin.pro
@gettok.pro
@valid_num.pro
@fxpar.pro
@fxbtform.pro
@fxbfind.pro
@fxbtdim.pro
@ieee_to_host.pro
@fxparpos.pro
@detabify.pro
@cgimage.pro
@cgdefcharsize.pro
@str_size.pro
@cgerase.pro
@setdecomposedstate.pro
@decomposedcolor.pro
@cgcolor.pro
@fsc_resize_image.pro
@congrid.pro
@cgplot.pro
@cgsnapshot.pro
@colorsareidentical.pro
@cgaxis.pro
@interpol.pro
@strsplit.pro
@mrdfits.pro
@fxposit.pro
@fxmove.pro
@mrd_hread.pro
@mrd_skip.pro
@mrd_struct.pro
@is_ieee_big.pro
@setdefaultvalue.pro
@cgdefaultcolor.pro
@getdecomposedstate.pro
@ps_background.pro
@ts_diff.pro
@fxposit.pro
@reverse.pro

pro MIDI_plot_OPD_Delay_CustomMask

sm = 101	;smoothing parameter
cut = [156,366]

print, ''
print, 'This script has to be started from MIA+EWS!'
print, ''


commnum = ''
read, 'Enter Observation ID: ', commnum
; commnum = 'P92CHOQUET'
print, ''
mainpath = '/media/disk_MIDIFSU/MIDI_FSUA/MIDI_FSUA_'+commnum+'/'
datapath = ['MIDIreduced_EWS_CustomMask/', 'MIDIreduced_Koresko_CustomMask/']	;'MIDIreduced_faintEWS/'


for i=0,n_elements(datapath)-1 do begin
  print, i+1, '   ', datapath[i]
endfor
print, ''
redmet = ''
read, 'Select reduction method (number): ', redmet
; redmet = '2'

print, ''
print, 'csmooth parameter and scaling parameter of cgimage can be adjusted'
print, ''

path = mainpath+datapath[uint(redmet)-1]

resultpath = path+'/OPD_Delay/'
file_mkdir, resultpath

file = file_search(path+'*.groupdelay*.fits', count=nfiles)

;extract ID and time stamp
pos1 = strpos(file, '/', /reverse_search)
pos2 = strpos(file, '.gr', /reverse_search)

id = strarr(nfiles)
for i=0,nfiles-1 do begin
  id[i] = strmid(file[i], pos1[i]+1, pos2[i]-pos1[i]-1)
  ;print, i+1, '   ', id[i]
endfor
; print, ''
; selid = ''
; read, 'Select ID you want to look at: ', selid


;=============================================================================================

for xx=0,nfiles-1 do begin
; for xx=0,1 do begin

  tag = id[xx]

  ; !x.charsize=0.8
  ; !y.charsize=0.8
  !p.font=0



  ;Calculate the aspect ratio of display window.
  aspectRatio = FLOAT(!D.Y_VSIZE) / !D.X_VSIZE 
  xsize = 8.0
    ysize = xsize * aspectRatio
    IF ysize GT 10.5 THEN BEGIN
      ysize = 10.5
      xsize = ysize / aspectRatio
    ENDIF
    ; Calculate the offsets, so the output window is not off the page.
    xoffset = (8.5 - xsize) / 2.0
    yoffset = (11.0 - ysize) / 2.0

  set_plot, 'ps'
  device, isolatin=1
  device, filename=resultpath+tag+'_OPD_Delay.ps', /color,XSIZE=35, YSIZE=17, XOffset=xoffset, YOffset=yoffset

    micron = '!Mm!X'+'m'

    gd = oirgetdata(path+tag+'.groupdelay*.fits',col='data1')
    gd = abs(csmooth2(pseudocomplex(gd.data1),sm))

    ; gd = gd[*,200:300]	;zoom in y-axis, scales will be wrong

    sizetmp = size(gd)
    str = mrdfits(path+tag+'.groupdelay*.fits', 3, /silent)
    ; rectime = (str[n_elements(str.time)-1].time-str[0].time)*86400.d0	;observing time in seconds

    ;; plot delay axis
    OPD0=1.d6*double(midigetkeyword('OPD0',path+tag+'.groupdelay*.fits',extna='IMAGING_DATA'))
    OPD1=1.d6*double(midigetkeyword('OPD1',path+tag+'.groupdelay*.fits',extna='IMAGING_DATA'))
    OPD2=1.d6*double(midigetkeyword('OPD2',path+tag+'.groupdelay*.fits',extna='IMAGING_DATA'))

    minopd=OPD0-OPD1
    maxopd=OPD0+OPD1
    ; cgaxis, yaxis=1, yrange=[minopd,maxopd], title='Delay / ['+micron+']', yticklen=-0.02, yst=1

    conv = (maxopd-minopd)/sizetmp[2]	;1px = x micron
    dscale = linspace(minopd, maxopd, sizetmp[2])
    conv2 = (max(dscale)-min(dscale))/double((size(gd[*,cut[0]:cut[1]]))[2])
    dscale2 = linspace(dscale[cut[0]], dscale[cut[1]], (size(gd[*,cut[0]:cut[1]]))[2])

    gd = reverse(gd,2)	;doing a reverse as its look more reasonable compared to the output of EWS
    cgimage, gd[*,cut[0]:cut[1]], xtitle='Time / [s]', /axes, axkeywords={xticklen:-0.02, yminor:2, xstyle:5, ystyle:5, ytickformat:'(A1)', xtickformat:'(A1)'}, stretch=1, top=250, bottom=20, minvalue=0, maxvalue=20000, position=[0.1,0.12,0.97,0.86] ;, title:tag}

    cgaxis, yaxis=0, yrange=[dscale[cut[0]],dscale[cut[1]]], title='Delay / ['+micron+']', yticklen=-0.02, yst=1
    cgaxis, xaxis=1, xrange=[0,n_elements(gd[*,0])], title='Frame!C', xstyle=1, xticklen=-0.02

  ;;
  ;; plot delay
    base=tag
    datatime = oirGetData(path+base+'.fringes.fits',col='time')
    datatime = REFORM(datatime.time) ; time of each frame in mjd 
    startTime= datatime[0]
    dtime    = 86400.d0*(datatime-startTime) ; seconds from beginning

    delay     = oirGetDelay(path+base+'.groupdelay*.fits')
    delaytime = REFORM(delay.time)&
    delaytime = 86400.d0*(delaytime-startTime) ; seconds relative to datastart 
    flagdata  = oirGetFlag(path+base+'.flag.fits')
    nFlag     = N_ELEMENTS(flagdata)
    flagdata.timerang = 86400.d0*(flagdata.timerang-startTime)

    opd   = oirGetOpd(path+base+'.fringes.fits')
    delay = REFORM(delay.delay)
    delay = INTERPOL(delay, delaytime, dtime) ; delay at each frame

    if (TOTAL(opd EQ 0.) GT 0 ) then $
	delay(where(opd EQ 0.0)) = median(reform(delay)); bad points
    if (KEYWORD_SET(twopass)) then begin
	delay2 = oirgetdelay(path+base+'.powerdelay.fits')
	delay2 = REFORM(delay2.delay)
	if (TOTAL(opd EQ 0.) GT 0 ) then begin
	  delay2(where(opd EQ 0.0)) = median(delay2); bad points
	endif
    endif
    if (TOTAL(opd EQ 0.) GT 0 ) then $
	opd(where(opd EQ 0.0)) = median(opd)  ; bad points
    ndelay = N_ELEMENTS(opd)
    topd   = where(dtime gt 15.)
    maxopd = max(opd)
    minopd = min(opd[topd])
    if (KEYWORD_SET(twopass)) then begin
	maxopd = max(maxopd>delay2)
	minopd = min(minopd<delay2[topd])
    endif

    duration = 86400.d0*(datatime[n_elements(datatime)-1] - datatime[0])
    cgaxis, xaxis=0, xrange=[0,duration], title='Time / [s]', xstyle=1, xticklen=-0.02


    tscale=n_elements(dtime)/duration

    ;fit the 'dscale' to find out to which pixel which delay belongs
    sixlin, findgen(n_elements(dscale2)), dscale2, n, nn, m, mm
    opd = (opd-n[0])/m[0]
    delay = (delay-n[0])/m[0]

;     cgplot,findgen(n_elements(opd)), opd, /overplot, color="blue"	;plots local
;     cgplot,findgen(n_elements(opd)), delay, color='green', /overplot, thick=2	;plots GD directly over fringe signal

    for i=0,nFlag-1 do cgplot, tscale*flagdata[i].timerang, max(opd)*[1,1], col='red', psym=sym(1), thick=3, /overplot

  device,/close
  set_plot,'x'

;   spawn, 'gv '+resultpath+tag+'_OPD_Delay.ps'

endfor

stop
end