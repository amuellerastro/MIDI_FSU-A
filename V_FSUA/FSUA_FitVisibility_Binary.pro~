@rhotheta.pro
@linspace.pro
@get_visibility.pro
@showsym.pro
@readcol.pro
@remchar.pro
@gettok.pro
@strsplit.pro
@strnumber.pro
@readfits.pro
@sxpar.pro
@get_eso_keyword.pro
@caldat.pro
@ten.pro
@calcpos.pro
@addpm.pro
@mpfit2dfun.pro
@mpfit.pro
@multiplot.pro
@cgplot.pro
@setdecomposedstate.pro
@decomposedcolor.pro
@cgdefaultcolor.pro
@getdecomposedstate.pro
@colorsareidentical.pro
@cgdefcharsize.pro
@cgcolor.pro
@cgtext.pro
@fsc_color.pro
@oploterror.pro
@setdefaultvalue.pro
@cgquery.pro
@symcat.pro
@tag_exist.pro
@legend.pro

function my_epoch2jd, epoch

  n = n_elements(epoch)

  hour = dblarr(n)
  minute = dblarr(n)
  sec = dblarr(n)

  year = double(floor(epoch))
  monthtmp = abs(epoch-year)*12.d0
  month = double(floor(monthtmp))
  daytmp = abs(monthtmp-month)*365.25d0/12.d0
  day = double(floor(daytmp))
  hourtmp = abs(daytmp-day)*24.d0

  for i=0,n-1 do begin

    tmp = sixty(hourtmp[i])
    hour[i] = tmp[0]
    minute[i] = tmp[1]
    sec[i] = tmp[2]

  endfor

  ;print, epoch[0], year[0], month[0], day[0], hour[0], minute[0], sec[0]

  return, julday(month, day, year, hour, minute, sec)

end

function my_jd2epoch, jd

  n = n_elements(jd)

  year = dblarr(n)
  month = dblarr(n)
  day = dblarr(n)
  hour = dblarr(n)
  minute = dblarr(n)
  sec = dblarr(n)

  for i=0,n-1 do begin

    caldat, jd[i], tmp1, tmp2, tmp3, tmp4, tmp5, tmp6
    year[i] = tmp3
    month[i] = tmp1
    day[i] = tmp2
    hour[i] = abs(ten(tmp4, tmp5, tmp6))

  endfor

  hourtmp = hour/24.d0	;days
  daytmp = (day+hourtmp)/(365.25d0/12.d0)	;month
  monthtmp = (month+daytmp)/12.d0	;year
  yeartmp = year+monthtmp

  return, yeartmp

end

function func_V2_binary, x, y, p, _extra=struct

  wl = struct.wl
  fit = (1.d0+p[2]^2.+(2.d0*p[2]*cos((2.d0*!DPI/wl)*(x*p[0]+y*p[1]))))/(1.d0+p[2])^2.

  return, fit

end

function plot_V2_binary, x, y, p, wl

  model = (1.d0+p[2]^2.+(2.d0*p[2]*cos((2.d0*!DPI/wl)*(x*p[0]+y*p[1]))))/(1.d0+p[2])^2.

  return, model

end

function get_uvw_bl, ha, latv, dec, t1x, t1y, t1z, t2x, t2y, t2z

  x = t1x - t2x
  y = t1y - t2y
  z = t1z - t2z

  latv  = latv/!radeg

  cha = cos(ha)
  sha = sin(ha)
  cdec = cos(dec)
  sdec = sin(dec)
  clat = cos(latv)
  slat = sin(latv)

  ;1st baseline T1 - T2

  ; compute u,v,w
  u = x*cha - y*slat*sha + z*clat*sha
  v = x*sha*sdec + y*(slat*cha*sdec + clat*cdec) - $
	  z*(clat*cha*sdec - slat*cdec)
  w = -x*sha*cdec - y*(slat*cha*cdec - clat*sdec) + $
		z*(clat*cha*cdec + slat*sdec)

  SinAlt =   (clat*cha*cdec + slat*sdec)
  alt = asin(SinAlt) ; <<<  in Radians!
  pa = atan(y, x) ; also in radians
  para = atan(sha, (slat/clat)*cdec-sdec*cha)

  alt = alt*!radeg ; to degrees

  bl = sqrt((u)^2.+(v)^2.)
  padeg = (atan(u, v))*!radeg

  if (padeg lt 0. and padeg ge -180.d0) then padeg = padeg + 180.d0; else stop

  return, [u,v,w,bl,padeg,alt]

end

pro FSUA_FitVisibility_Binary

path = '/home/amueller/work/MIDI_FSUA/Pipeline/V_FSUA/'

dsselect = ''
dataset = ['1: HD155826 - 20130706', $
           '2:    24Psc - 20131028']

print, ''
print, 'Available Data Sets:'
for i=0,n_elements(dataset)-1 do print, dataset[i]
read, 'Select Data Set: ', dsselect

;==================================================================
if (dsselect eq '1') then begin

  ;path for FSU-A sky cal results
  caldata = path+'20130706_HD155826/allFringeScans_HD155826.sav'
  obsnum = 'FSUAscans_20130706' 

  alpha1 = [17.d0, 15.d0, 35.94943d0]
  delta1 = [-38.d0, 35.d0, 38.0469d0]
  pm = [-171.98d0, -391.07d0]	;mas/yr
  rv = -59.2d0 ;km/s	Geneva-Copenhagen survey re-analysis (Casagrande+, 2011)
  plx = 32.69d0/1.d3	;arcsec
  flr = 4.285485d0
  start_params = [-57.d0, 63.d0, flr]	;dalpha, ddelta in mas, flux ratio

  pi = replicate({fixed:0, limited:[0,0], limits:[0.D,0.D]},3)
  pi[0].limited[0] = 1
  pi[0].limited[1] = 1
  pi[0].limits[0] = -80.d0/3.6d6*!dtor
  pi[0].limits[1] = -30.d0/3.6d6*!dtor
  pi[1].limited[0] = 1
  pi[1].limited[1] = 1
  pi[1].limits[0] = 30./3.6d6*!dtor
  pi[1].limits[1] = 90./3.6d6*!dtor
;   pi[2].limited[0] = 1
;   pi[2].limited[1] = 1
;   pi[2].limits[0] = 0.d0
;   pi[2].limits[1] = 3.d3

  ;to overplot V2 variation of published orbit
  epoch = my_jd2epoch(2456480.59527349d0)	;this observation
  ;		a	P	  e  		T      omega    OMEGA     i
  mason = [0.2527d0, 14.215d0, 0.4912d0, 1985.98d0, 135.2d0, 190.41d0, 115.2d0]	;known orbit
  flr_mason = 4.285d0

endif
;--------------------------------------------------------------------
if (dsselect eq '2') then begin

  ;path for FSU-A sky cal results
  caldata = path+'20131028_24Psc/allFringeScans_24Psc.sav'
  obsnum = 'FSUAscans_20131028' 
  
  alpha1 = [23.d0, 52.d0, 55.56405d0]
  delta1 = [-03.d0, 09.d0, 19.7361d0]
  pm = [75.15d0, -42.90d0]	;mas/yr
  rv = -6.3d0 ;km/s
  plx = 6.53d0/1.d3	;arcsec
  flr = 1.0d0

  start_params = [-60.d0, -16.d0, flr]	;dalpha, ddelta in mas, flux ratio
  pi = replicate({fixed:0, limited:[0,0], limits:[0.D,0.D]},3)
  pi[0].limited[0] = 1
  pi[0].limited[1] = 1
  pi[0].limits[0] = -100.d0/3.6d6*!dtor
  pi[0].limits[1] = -30.d0/3.6d6*!dtor
  pi[1].limited[0] = 1
  pi[1].limited[1] = 1
  pi[1].limits[0] = -50./3.6d6*!dtor
  pi[1].limits[1] = 0./3.6d6*!dtor
  pi[2].limited[0] = 1
  pi[2].limited[1] = 1
  pi[2].limits[0] = 0.5d0
  pi[2].limits[1] = 2.5d

  ;to overplot V2 variation of published orbit
  epoch = my_jd2epoch(2456594.74059608d0)	;this observation
  ;		a	P	  e  		T      omega    OMEGA     i
  mason = [0.0832d0, 22.81d0, 0.422d0, 1988.72d0, 298.3d0, 209.5d0, 133.7d0]	;known orbit
  flr_mason = 1.0d0

endif
;==================================================================

pxmode = ''
print, ''
print, '3: 3 pixel'
print, '5: 5 pixel'
read, 'Select Pixel mode: ', pxmode
print, ''

if (pxmode ne '3' and pxmode ne '5') then begin

  print, ''
  print, 'Choice does not exist. Stop.'
  print, ''
  return

endif

if (pxmode eq '3') then npix = 4
if (pxmode eq '5') then npix = 6

tfmode = ''
print, ''
print, '1: Average'
print, '2: Interpolation 2nd degree'
print, '3: Interpolation 3rd degree'
read, 'Select TF mode: ', tfmode

if (tfmode eq '1') then idtfmode = 'Average'
if (tfmode eq '2') then idtfmode = 'InterpDeg2'
if (tfmode eq '3') then idtfmode = 'InterpDeg3'

if (tfmode ne '1' and tfmode ne '2' and tfmode ne '3') then begin

  print, ''
  print, 'Choice does not exist. Stop.'
  print, ''
  return

endif

vispath = path+'Vis_'+obsnum+'_'+pxmode+'pixel/TFcal_V2sci_'+idtfmode+'/'

resultpath = path+'Vis_'+obsnum+'_'+pxmode+'pixel/Binary_ModelFit_TF'+idtfmode+'/'
spawn, 'mkdir -p '+resultpath

readcol, path+'FSUA_FringeScans.txt', obsid, scan, bg, ff1, ff2, starflag, diam, format='a,a,a,a,a,a,d', /silent



restore, caldata
if (pxmode eq '5') then begin

  ave_wl_cal = [median(lam2[*,0],/even), median(lam2[*,1],/even), median(lam2[*,2],/even), median(lam2[*,3],/even), median(lam2[*,4],/even), median(lam2[*,5],/even)]
  bw =  [median(bandwidth[*,*,0],/even),median(bandwidth[*,*,1],/even),median(bandwidth[*,*,2],/even),median(bandwidth[*,*,3],/even),median(bandwidth[*,*,4],/even),median(bandwidth[*,*,5],/even)]

endif

if (pxmode eq '3') then begin

  ave_wl_cal = [median(lam2[*,0],/even), median(lam2[*,2],/even), median(lam2[*,3],/even), median(lam2[*,4],/even)]

  bw =  [median(bandwidth[*,*,0],/even),median(bandwidth[*,*,2],/even),median(bandwidth[*,*,3],/even),median(bandwidth[*,*,4],/even)]

endif


idx = where(obsid eq obsnum)

  obsid = obsid[idx]
  scan = scan[idx]
  bg = bg[idx]
  ff1 = ff1[idx]
  ff2 = ff2[idx]
  starflag = starflag[idx]
  diam = diam[idx]

idx = where(starflag eq 'Sci')

  obsid = obsid[idx]
  scan = scan[idx]
  bg = bg[idx]
  ff1 = ff1[idx]
  ff2 = ff2[idx]
  starflag = starflag[idx]
  diam = diam[idx]


nfiles = n_elements(obsid)
target = strarr(nfiles)
vis2AC = dblarr(nfiles, npix) & vis2ACerr = vis2AC
vis2BD = dblarr(nfiles, npix) & vis2BDerr = vis2BD
vis2AC_fit = dblarr(nfiles, npix) & vis2ACerr_fit = vis2AC_fit
vis2BD_fit = dblarr(nfiles, npix) & vis2BDerr_fit = vis2BD_fit
da_fit_AC = dblarr(npix) & dd_fit_AC = da_fit_AC & da_err_fit_AC = da_fit_AC & dd_err_fit_AC = da_fit_AC
flr_fit_AC = dblarr(npix) & flr_err_fit_AC = flr_fit_AC
da_fit_BD = dblarr(npix) & dd_fit_BD = da_fit_BD & da_err_fit_BD = da_fit_BD & dd_err_fit_BD = da_fit_BD
flr_fit_BD = dblarr(npix) & flr_err_fit_BD = flr_fit_BD
bl = dblarr(nfiles) & padeg = bl & u = bl & v = bl & w = bl & ha = bl & pa = bl & altitude = bl
utc = dblarr(nfiles)
fileid = strarr(nfiles)

for i=0,nfiles-1 do begin

  ;read in fits file for array geometry etc.
  file = obsid[i]+'/'+scan[i]+'.fits'

  ;remove full path in front of file
  pos1 = strpos(file, 'FSUA_SECOND_FRINGE')
  pos2 = strpos(file, '.fits')
  file = strmid(file, pos1, pos2-pos1+5)

  ;extract file ID
  pos1 = strpos(file, 'SCAN_')
  pos2 = strpos(file, '.fits')
  fileid[i] = strmid(file, pos1+5, pos2-pos1-5)

  ;extract keywords present in OBJ_SCAN files

  dummy = readfits(obsid[i]+'/'+file, header, /silent)

  jd = double(get_eso_keyword(header, 'MJD-OBS'))+0.5d0+2400000.d0
  tmp = get_eso_keyword(header, 'HIERARCH ESO OBS TARG NAME')
  target[i] = tmp

  tel1 = get_eso_keyword(header,'HIERARCH ESO ISS CONF T1NAME')	;id of 1st telescope
  tel2 = get_eso_keyword(header,'HIERARCH ESO ISS CONF T1NAME')	;id of 2nd telescope
  station1 = get_eso_keyword(header,'HIERARCH ESO ISS CONF STATION1')
  station2 = get_eso_keyword(header,'HIERARCH ESO ISS CONF STATION2')

  radeg = double(strtrim(sxpar(header,'RA'),2))	;degrees
  dec = double(strtrim(sxpar(header,'DEC'),2))	;degrees
  lstsec = double(strtrim(sxpar(header,'LST'),2))	;seconds

  ;get the middle of the observation
  tmid = double(get_eso_keyword(header, 'EXPTIME'))/2.d0
  lstsec = lstsec+tmid
;   if (lstsec gt 86400.d0) then lstsec = lstsec-86400.d0	;needed?
  utc[i] = double((get_eso_keyword(header, 'UTC')+tmid)/3600.d0)

  t1x = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1X'))
  t1y = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1Y'))
  t1z = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1Z'))
  t2x = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2X'))
  t2y = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2Y'))
  t2z = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2Z'))
  obs_long = double(get_eso_keyword(header,'HIERARCH ESO ISS GEOLON'))	;longitude VLTI
  lat_vlti = double(get_eso_keyword(header,'HIERARCH ESO ISS GEOLAT'))	;latitude VLTI

  dec = dec*!dtor
  lst = (lstsec)*15.d0/(3600.d0*!radeg)
  ra = radeg*!dtor
  ha[i] = lst - ra

  ; if (ha lt 0.) then ha = ha + 360.0d0
;   if (ha gt 180.d0) then ha = ha - 360.0d0
;   if (ha[i] gt 2.*!DPI or ha[i] lt -2.*!DPI) then stop	;something to do here?
  if (ha[i] lt -!DPI) then ha[i] = ha[i]+2.*!DPI
  if (ha[i] gt !DPI) then ha[i] = ha[i]-2.*!DPI

;   x = t1x - t2x
;   y = t1y - t2y
;   z = t1z - t2z
; 
;   lat_vlti  = lat_vlti/!radeg
; 
; ;   ihar = ha*!dtor 	;/ 57.29577951d0
; ;   decr = dec*!dtor	; / 57.29577951d0
; 
;   cha = cos(ha[i])
;   sha = sin(ha[i])
;   cdec = cos(dec)
;   sdec = sin(dec)
;   clat = cos(lat_vlti)
;   slat = sin(lat_vlti)
; 
;   ;1st baseline T1 - T2
; 
;   ; compute u,v,w
;   u[i] = x*cha - y*slat*sha + z*clat*sha
;   v[i] = x*sha*sdec + y*(slat*cha*sdec + clat*cdec) - $
; 	  z*(clat*cha*sdec - slat*cdec)
;   w[i] = -x*sha*cdec - y*(slat*cha*cdec - clat*sdec) + $
; 		z*(clat*cha*cdec + slat*sdec)
; 
;   SinAlt =   (clat*cha*cdec + slat*sdec)
;   alt = asin(SinAlt) ; <<<  in Radians!
;   pa = atan(y, x) ; also in radians
;   para = atan(sha, (slat/clat)*cdec-sdec*cha)
; 
;   alt = alt*!radeg ; to degrees
; 
;   bl[i] = sqrt((u[i])^2.+(v[i])^2.)
;   padeg[i] = (atan(u[i], v[i]))*!radeg
; 
;   if (padeg[i] lt 0. and padeg[i] ge -180.d0) then padeg[i] = padeg[i] + 180.d0 else stop

  result = get_uvw_bl(ha[i], lat_vlti, dec, t1x, t1y, t1z, t2x, t2y, t2z)
  u[i] = result[0]
  v[i] = result[1]
  w[i] = result[2]
  bl[i] = result[3]
  pa[i] = result[4]
  altitude[i] = result[5]

;   caldat, jd, mo, day, yr, hh, mm, ss
;   hour = hh+mm/60.d0+ss/3600.d0
;   date = yr+mo/12.+day/365.25d0+hour/8766.0d0
;   calcpos, ten(alpha1)*15.d0, ten(delta1), pm[0]/1000., pm[1]/1000.d0, rv, plx, 2000.d0, 2000.d0, 2000.d0, date, 2000.d0, 'Y', 'Y', outra, outdec
; 
;   alpha1 = outra
;   delta1 = outdec

  ;read in calibrated Visibilities of AC and BD
  filevis = vispath+fileid[i]+'_Sci_'+target[i]+'_V2sci.txt'
  if (pxmode eq '5') then readcol, filevis, px, tfAC, tfACerr, v2AC_tmp, v2ACerr_tmp, tfBD, tfBDerr, v2BD_tmp, v2BDerr_tmp, skipline=14, numline=6, format='i,d,d,d,d,d,d,d,d', /silent
  if (pxmode eq '3') then readcol, filevis, px, tfAC, tfACerr, v2AC_tmp, v2ACerr_tmp, tfBD, tfBDerr, v2BD_tmp, v2BDerr_tmp, skipline=12, numline=4, format='i,d,d,d,d,d,d,d,d', /silent

  vis2AC[i,*] = v2AC_tmp
  vis2ACerr[i,*] = v2ACerr_tmp
  vis2BD[i,*] = v2BD_tmp
  vis2BDerr[i,*] = v2BDerr_tmp

endfor

; idxsort = sort(bl)
; bl = bl[idxsort]
; vis2AC = vis2AC[idxsort,*]
; vis2ACerr = vis2ACerr[idxsort,*]
; vis2BD = vis2BD[idxsort,*]
; vis2BDerr = vis2BDerr[idxsort,*]
; utc = utc[idxsort]
; ha = ha[idxsort]

;-----------------------------------------------------------------------------------

;compute U, V, and BL for model plot, i.e. dense spacing
hatmp = ha/!dtor/15.d0	;hours
dum = min(hatmp, idxmin)
dum = max(hatmp, idxmax)
; hatmp = ha[sort(ha)]
; ha_start = floor(hatmp[0])
; ha_end = ceil(hatmp[nfiles-1])
ha_start = floor(hatmp[idxmin])
ha_end = ceil(hatmp[idxmax])
ha_model = linspace(ha_start, ha_end, 500)
if (idxmin gt idxmax) then ha_model = ha_model[bsort(ha_model, /reverse)]
ha_model = ha_model*!dtor*15.d0	;rad
; ha_model = ha

u_model = dblarr(n_elements(ha_model)) & v_model = u_model & w_model = u_model & bl_model = u_model

for i=0,n_elements(ha_model)-1 do begin

  lat_vlti = double(get_eso_keyword(header,'HIERARCH ESO ISS GEOLAT'))
  t1x = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1X'))
  t1y = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1Y'))
  t1z = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T1Z'))
  t2x = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2X'))
  t2y = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2Y'))
  t2z = double(get_eso_keyword(header,'HIERARCH ESO ISS CONF T2Z'))
  dec = double(strtrim(sxpar(header,'DEC'),2))	;degrees
  dec = dec*!dtor

  result = get_uvw_bl(ha_model[i], lat_vlti, dec, t1x, t1y, t1z, t2x, t2y, t2z)
  u_model[i] = result[0]
  v_model[i] = result[1]
  w_model[i] = result[2]
  bl_model[i] = result[3]

endfor


; window, 0
; plot, ha_model, u_model
; oplot, ha, u, color=rgb(0,255,0), psym=2


;-----------------------------------------------------------------------------------

vis2AC_model = dblarr(n_elements(ha_model),6) & vis2BD_model = vis2AC_model
vis2_AC_mason = dblarr(n_elements(ha_model),6)
vis2_BD_mason = dblarr(n_elements(ha_model),6)

start_params[0:1] = start_params[0:1]/3.6d6*!dtor

for i=0,npix-1 do begin

  struct = {wl:ave_wl_cal[i]}

  fitparamsAC = mpfit2dfun('func_V2_binary', u, v, vis2AC[*,i], vis2ACerr[*,i], start_params, weights=1.d0/(vis2ACerr[*,i]/vis2AC[*,i]), maxiter=2000, niter=niter, status=status, bestnorm=bestnorm, yfit=yfit, perror=perror, dof=dof, functargs=struct, /quiet, parinfo=pi)
  ;weights are rleative error because small V^2 leads to small errors

  da_fit_AC[i] = fitparamsAC[0]/!dtor
  da_err_fit_AC[i] = perror[0]/!dtor
  dd_fit_AC[i] = fitparamsAC[1]/!dtor
  dd_err_fit_AC[i] = perror[1]/!dtor
  flr_fit_AC[i] = fitparamsAC[2]
  flr_err_fit_AC[i] = perror[2]
  vis2AC_fit[*,i] = yfit
  vis2ACerr_fit[*,i] = vis2AC_fit[*,i]*sqrt((perror[0]/fitparamsAC[0])^2.+(perror[1]/fitparamsAC[1])^2.+(2.*perror[2]/fitparamsAC[2])^2.)

  fitparamsBD = mpfit2dfun('func_V2_binary', u, v, vis2BD[*,i], vis2BDerr[*,i], start_params, weights=1.d0/(vis2BDerr[*,i]/vis2BD[*,i]), maxiter=2000, niter=niter, status=status, bestnorm=bestnorm, yfit=yfit, perror=perror, dof=dof, functargs=struct, /quiet, parinfo=pi)

  da_fit_BD[i] = fitparamsBD[0]/!dtor
  da_err_fit_BD[i] = perror[0]/!dtor
  dd_fit_BD[i] = fitparamsBD[1]/!dtor
  dd_err_fit_BD[i] = perror[1]/!dtor
  flr_fit_BD[i] = fitparamsBD[2]
  flr_err_fit_BD[i] = perror[2]
  vis2BD_fit[*,i] = yfit
  vis2BDerr_fit[*,i] = vis2BD_fit[*,i]*sqrt((perror[0]/fitparamsBD[0])^2.+(perror[1]/fitparamsBD[1])^2.+(2.*perror[2]/fitparamsBD[2])^2.)

  ;smooth model
  vis2AC_model[*,i] = plot_V2_binary(u_model, v_model, [da_fit_AC[i]*!dtor, dd_fit_AC[i]*!dtor, flr_fit_AC[i]], ave_wl_cal[i])
  vis2BD_model[*,i] = plot_V2_binary(u_model, v_model, [da_fit_BD[i]*!dtor, dd_fit_BD[i]*!dtor, flr_fit_BD[i]], ave_wl_cal[i])

;----------------------------------------------------------------------------------------

  ;compute the theoretical orbit based on literature values, e.g. Mason+2010
  result = rhotheta(mason[1], mason[3], mason[2], mason[0], mason[6], mason[5], mason[4], epoch)
  da_mason = (result.rho/3600.d0)*sin(result.theta*!dtor)	;deg
  dd_mason = (result.rho/3600.d0)*cos(result.theta*!dtor)	;deg
  if (dsselect eq '1' or dsselect eq '2') then begin	;swich coordinates

    tmp1 = da_mason
    tmp2 = dd_mason
    da_mason = tmp2
    dd_mason = tmp1

  endif

;   da_mason = da*3600.d0	;arcsec
;   dd_mason = dd*3600.d0	;arcsec
  vis2_AC_mason[*,i] = plot_V2_binary(u_model, v_model, [da_mason*!dtor, dd_mason*!dtor, flr_fit_AC[i]], ave_wl_cal[i])
  vis2_BD_mason[*,i] = plot_V2_binary(u_model, v_model, [da_mason*!dtor, dd_mason*!dtor, flr_fit_BD[i]], ave_wl_cal[i])

endfor

;=============================================================================================================

;OUTPUT

if (pxmode eq '3') then begin

  multiplot,/default

  set_plot, 'ps'
  device, filename=resultpath+'Vis2_BL_Binary_ModelFit.ps',/color,XSIZE=22, YSIZE=20, XOffset=xoffset, YOffset=yoffset
  !p.thick=4
  !x.thick=3
  !y.thick=3


  multiplot, [2,4], mXtitle = 'Projected Baseline / [m]', mYtitle = 'Calibrated V!U2!N', mTitOffset=-0.5, mxTitSize=1.5, mxTitOffset=1, myTitSize=1.5, myTitOffset=2, gap=0.0;, mtitle=

  for i=0,3 do begin

    plot, bl, vis2AC[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata
  ;   oploterror, bl, vis2AC_fit[*,i], vis2ACerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, bl_model, vis2AC_model[*,i], color=fsc_color('red')
    oplot, bl_model, vis2_AC_mason[*,i], color=fsc_color('green')
    oploterror, bl, vis2AC[*,i], vis2ACerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(bl), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
;     if (i eq 0) then legend, ['measured', 'model'], box=0, margin=0, /left, /top, color=[fsc_color('black'), fsc_color('red')], psym=[sym(1), sym(1)], charsize=1.2
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'AC', /data, charsize=1.2

    multiplot

    plot, bl, vis2BD[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata
  ;   oploterror, bl, vis2BD_fit[*,i], vis2BDerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, bl_model, vis2BD_model[*,i], color=fsc_color('red')
    oplot, bl_model, vis2_BD_mason[*,i], color=fsc_color('green')
    oploterror, bl, vis2BD[*,i], vis2BDerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(bl), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'BD', /data, charsize=1.2

    multiplot

  endfor

  multiplot,/default

  device,/close
  set_plot,'x'
  !p.multi=[0,1,0]
  ; !P.Font=0
  !p.thick=1
  !x.thick=1
  !y.thick=1

;   spawn, 'gv '+resultpath+'Vis2_BL_Binary_ModelFit.ps'


  ;------------------------------------------------------------------------------------

  set_plot, 'ps'
  device, filename=resultpath+'Vis2_HA_Binary_ModelFit.ps',/color,XSIZE=22, YSIZE=20, XOffset=xoffset, YOffset=yoffset
  !p.thick=4
  !x.thick=3
  !y.thick=3


  multiplot, [2,4], mXtitle = 'Hour Angle / [hr]', mYtitle = 'Calibrated V!U2!N', mTitOffset=-0.5, mxTitSize=1.5, mxTitOffset=1, myTitSize=1.5, myTitOffset=2, gap=0.0;, mtitle=

  ha = ha/15.d0/!dtor
  ha_model = ha_model/15.d0/!dtor

  for i=0,3 do begin

    plot, ha, vis2AC[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata;, xr=[2.5,5], xst=1
  ;   oploterror, ha, vis2AC_fit[*,i], vis2ACerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, ha_model, vis2AC_model[*,i], color=fsc_color('red')
    oplot, ha_model, vis2_AC_mason[*,i], color=fsc_color('green')
    oploterror, ha, vis2AC[*,i], vis2ACerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(ha), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
;     if (i eq 0) then legend, ['measured', 'model'], box=0, margin=0, /left, /top, color=[fsc_color('black'), fsc_color('red')], psym=[sym(1), sym(1)], charsize=1.2
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'AC', /data, charsize=1.2

    multiplot

    plot, ha, vis2BD[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata;, xr=[2.5,5], xst=1
  ;   oploterror, ha, vis2BD_fit[*,i], vis2BDerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, ha_model, vis2BD_model[*,i], color=fsc_color('red')
    oplot, ha_model, vis2_BD_mason[*,i], color=fsc_color('green')
    oploterror, ha, vis2BD[*,i], vis2BDerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(ha), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'BD', /data, charsize=1.2

    multiplot

  endfor

  multiplot,/reset

  device,/close
  set_plot,'x'
  !p.multi=[0,1,0]
  ; !P.Font=0
  !p.thick=1
  !x.thick=1
  !y.thick=1

  spawn, 'gv '+resultpath+'Vis2_HA_Binary_ModelFit.ps'

endif

;-------------------------------------------------------------------------------------------------------------

if (pxmode eq '5') then begin

  multiplot,/default

  set_plot, 'ps'
  device, filename=resultpath+'Vis2_BL_Binary_ModelFit.ps',/color,XSIZE=22, YSIZE=25, XOffset=xoffset, YOffset=yoffset
  !p.thick=4
  !x.thick=3
  !y.thick=3


  multiplot, [2,6], mXtitle = 'Projected Baseline / [m]', mYtitle = 'Calibrated V!U2!N', mTitOffset=-0.5, mxTitSize=1.5, mxTitOffset=1, myTitSize=1.5, myTitOffset=2, gap=0.0;, mtitle=

  for i=0,5 do begin

    plot, bl, vis2AC[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata
  ;   oploterror, bl, vis2AC_fit[*,i], vis2ACerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, bl_model, vis2AC_model[*,i], color=fsc_color('green')
    oplot, bl_model, vis2_AC_mason[*,i], color=fsc_color('red')
    oploterror, bl, vis2AC[*,i], vis2ACerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(bl), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
;     if (i eq 0) then legend, ['measured', 'model'], box=0, margin=0, /left, /top, color=[fsc_color('black'), fsc_color('red')], psym=[sym(1), sym(1)], charsize=1.2
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'AC', /data, charsize=1.2

    multiplot

    plot, bl, vis2BD[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata
  ;   oploterror, bl, vis2BD_fit[*,i], vis2BDerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, bl_model, vis2BD_model[*,i], color=fsc_color('green')
    oplot, bl_model, vis2_BD_mason[*,i], color=fsc_color('red')
    oploterror, bl, vis2BD[*,i], vis2BDerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(bl), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'BD', /data, charsize=1.2

    multiplot

  endfor

  multiplot,/default

  device,/close
  set_plot,'x'
  !p.multi=[0,1,0]
  ; !P.Font=0
  !p.thick=1
  !x.thick=1
  !y.thick=1

;   spawn, 'gv '+resultpath+'Vis2_BL_Binary_ModelFit.ps'


  ;------------------------------------------------------------------------------------

  set_plot, 'ps'
  device, filename=resultpath+'Vis2_HA_Binary_ModelFit.ps',/color,XSIZE=22, YSIZE=25, XOffset=xoffset, YOffset=yoffset
  !p.thick=4
  !x.thick=3
  !y.thick=3


  multiplot, [2,6], mXtitle = 'Hour Angle / [hr]', mYtitle = 'Calibrated V!U2!N', mTitOffset=-0.5, mxTitSize=1.5, mxTitOffset=1, myTitSize=1.5, myTitOffset=2, gap=0.0;, mtitle=

  ha = ha/15.d0/!dtor
  ha_model = ha_model/15.d0/!dtor

  for i=0,5 do begin

    plot, ha, vis2AC[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata;, xr=[2.5,5], xst=1
  ;   oploterror, ha, vis2AC_fit[*,i], vis2ACerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, ha_model, vis2AC_model[*,i], color=fsc_color('green')
    oplot, ha_model, vis2_AC_mason[*,i], color=fsc_color('red')
    oploterror, ha, vis2AC[*,i], vis2ACerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(ha), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
;     if (i eq 0) then legend, ['measured', 'model'], box=0, margin=0, /left, /top, color=[fsc_color('black'), fsc_color('red')], psym=[sym(1), sym(1)], charsize=1.2
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'AC', /data, charsize=1.2

    multiplot

    plot, ha, vis2BD[*,i], yr=[0,1.1], yst=1, linestyle=1, charsize=1.2, xticklen=0.06, yticklen=0.03, /nodata;, xr=[2.5,5], xst=1
  ;   oploterror, ha, vis2BD_fit[*,i], vis2BDerr_fit[*,i], psym=sym(1), color=fsc_color('red'), symsize=0.8
    oplot, ha_model, vis2BD_model[*,i], color=fsc_color('green')
    oplot, ha_model, vis2_BD_mason[*,i], color=fsc_color('red')
    oploterror, ha, vis2BD[*,i], vis2BDerr[*,i], psym=sym(1), color=fsc_color('black'), errcolor=fsc_color('black')
    xyouts, min(ha), 0.1, 'Pixel '+strcompress(px[i], /rem), /data
    if (i eq 0) then xyouts, abs(!x.crange[0]+!x.crange[1])/2., 1.2, 'BD', /data, charsize=1.2

    multiplot

  endfor

  multiplot,/reset

  device,/close
  set_plot,'x'
  !p.multi=[0,1,0]
  ; !P.Font=0
  !p.thick=1
  !x.thick=1
  !y.thick=1

  spawn, 'gv '+resultpath+'Vis2_HA_Binary_ModelFit.ps'

endif

;------------------------------------------------------------------------------------

;weighted mean

; wm_da_AC = (total((1./da_err_fit_AC^2.)*da_fit_AC))/total(1./da_err_fit_AC^2.)*3.6d6	;mas
; wm_da_err_AC = sqrt(n_elements(da_fit_AC)/total(1./da_err_fit_AC^2.))*3.6d6
; wm_dd_AC = (total((1./dd_err_fit_AC^2.)*dd_fit_AC))/total(1./dd_err_fit_AC^2.)*3.6d6
; wm_dd_err_AC = sqrt(n_elements(dd_fit_AC)/total(1./dd_err_fit_AC^2.))*3.6d6
; wm_flr_AC = (total((1./flr_err_fit_AC^2.)*flr_fit_AC))/total(1./flr_err_fit_AC^2.)
; wm_flr_err_AC = sqrt(n_elements(flr_fit_AC)/total(1./flr_err_fit_AC^2.))
; 
; wm_da_BD = (total((1./da_err_fit_BD^2.)*da_fit_BD))/total(1./da_err_fit_BD^2.)*3.6d6
; wm_da_err_BD = sqrt(n_elements(da_fit_BD)/total(1./da_err_fit_BD^2.))*3.6d6
; wm_dd_BD = (total((1./dd_err_fit_BD^2.)*dd_fit_BD))/total(1./dd_err_fit_BD^2.)*3.6d6
; wm_dd_err_BD = sqrt(n_elements(dd_fit_BD)/total(1./dd_err_fit_BD^2.))*3.6d6
; wm_flr_BD = (total((1./flr_err_fit_BD^2.)*flr_fit_BD))/total(1./flr_err_fit_BD^2.)
; wm_flr_err_BD = sqrt(n_elements(flr_fit_BD)/total(1./flr_err_fit_BD^2.))

wm_da_AC = mean(da_fit_AC)*3.6d6
wm_da_err_AC = stddev(da_fit_AC)*3.6d6
wm_dd_AC = mean(dd_fit_AC)*3.6d6
wm_dd_err_AC = stddev(dd_fit_AC)*3.6d6
wm_flr_AC = mean(flr_fit_AC)
wm_flr_err_AC = stddev(flr_fit_AC)

wm_da_BD = mean(da_fit_BD)*3.6d6
wm_da_err_BD = stddev(da_fit_BD)*3.6d6
wm_dd_BD = mean(dd_fit_BD)*3.6d6
wm_dd_err_BD = stddev(dd_fit_BD)*3.6d6
wm_flr_BD = mean(flr_fit_BD)
wm_flr_err_BD = stddev(flr_fit_BD)

;rhot theta from fit
;http://de.wikipedia.org/wiki/Orthodrome#Strecke
theta_new_AC = atan((wm_da_AC*!dtor/3.6d6)/(wm_dd_AC*!dtor/3.6d6))/!dtor
theta_new_err_AC = abs(theta_new_AC*sqrt((wm_da_err_AC/wm_da_AC)^2. + (wm_dd_err_AC/wm_dd_AC)^2.))
rho_new_AC = acos(cos(wm_dd_AC*!dtor/3.6d6)*cos(wm_da_AC*!dtor/3.6d6))/!dtor*3.6d6
rho_new_err_AC = rho_new_AC*sqrt((wm_da_err_AC/wm_da_AC)^2. + (wm_dd_err_AC/wm_dd_AC)^2.)

theta_new_BD = atan((wm_da_BD*!dtor/3.6d6)/(wm_dd_BD*!dtor/3.6d6))/!dtor
theta_new_err_BD = abs(theta_new_BD*sqrt((wm_da_err_BD/wm_da_BD)^2. + (wm_dd_err_BD/wm_dd_BD)^2.))
rho_new_BD = acos(cos(wm_dd_BD*!dtor/3.6d6)*cos(wm_da_BD*!dtor/3.6d6))/!dtor*3.6d6
rho_new_err_BD = rho_new_BD*sqrt((wm_da_err_BD/wm_da_BD)^2. + (wm_dd_err_BD/wm_dd_BD)^2.)

;------------------------------------------------------------------------------------

openw, lun, resultpath+'Result_BinaryModelFit.txt', width=1400, /get_lun

  printf, lun, 'AC'
  printf, lun, 'Pixel     RAoffset            dRA      DECoffset     dDEC / mas      FluxRatio           dFLR'
  if (pxmode eq '3') then for i=0,3 do printf, lun, px[i], da_fit_AC[i]*3600.d0*1.d3, da_err_fit_AC[i]*3600.d0*1.d3, dd_fit_AC[i]*3600.d0*1.d3, dd_err_fit_AC[i]*3600.d0*1.d3, flr_fit_AC[i], flr_err_fit_AC[i], format='(i3, 6f15.7)'
  if (pxmode eq '5') then for i=0,5 do printf, lun, px[i], da_fit_AC[i]*3600.d0*1.d3, da_err_fit_AC[i]*3600.d0*1.d3, dd_fit_AC[i]*3600.d0*1.d3, dd_err_fit_AC[i]*3600.d0*1.d3, flr_fit_AC[i], flr_err_fit_AC[i], format='(i3, 6f15.7)'
  printf, lun, ''
  printf, lun, 'BD'
  printf, lun, 'Pixel     RAoffset            dRA      DECoffset     dDEC / mas      FluxRatio           dFLR'
  if (pxmode eq '3') then for i=0,3 do printf, lun, px[i], da_fit_BD[i]*3600.d0*1.d3, da_err_fit_BD[i]*3600.d0*1.d3, dd_fit_BD[i]*3600.d0*1.d3, dd_err_fit_BD[i]*3600.d0*1.d3, flr_fit_BD[i], flr_err_fit_BD[i], format='(i3, 6f15.7)'
  if (pxmode eq '5') then for i=0,5 do printf, lun, px[i], da_fit_BD[i]*3600.d0*1.d3, da_err_fit_BD[i]*3600.d0*1.d3, dd_fit_BD[i]*3600.d0*1.d3, dd_err_fit_BD[i]*3600.d0*1.d3, flr_fit_BD[i], flr_err_fit_BD[i], format='(i3, 6f15.7)'
  printf, lun, ''
  ;printf, lun, 'Weighted Mean'
  printf, lun, 'Mean and Standard Deviation'
  printf, lun, '           RAoffset            dRA      DECoffset     dDEC / mas      FluxRatio           dFLR'
  printf, lun, 'AC:', wm_da_AC, wm_da_err_AC, wm_dd_AC, wm_dd_err_AC, wm_flr_AC, wm_flr_err_AC, format='(a4, 6f15.7)'
  printf, lun, 'BD:', wm_da_BD, wm_da_err_BD, wm_dd_BD, wm_dd_err_BD, wm_flr_BD, wm_flr_err_BD, format='(a4, 6f15.7)'
  printf, lun, ''
  printf, lun, '          Rho / mas       RhoError    Theta / deg     ThetaError'
  printf, lun, 'AC:', rho_new_AC, rho_new_err_AC, theta_new_AC, theta_new_err_AC, format='(a4, 4f15.7)'
  printf, lun, 'BD:', rho_new_BD, rho_new_err_BD, theta_new_BD, theta_new_err_BD, format='(a4, 4f15.7)'

close, lun
free_lun, lun

;------------------------------------------------------------------------------------


; theta_new = atan((da*!dtor)/(dd*!dtor))/!dtor
; rho_new = acos(cos(dd*!dtor)*cos(da*!dtor))/!dtor
;http://de.wikipedia.org/wiki/Orthodrome#Strecke

stop
end